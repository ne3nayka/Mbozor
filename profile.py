import aiosqlite
import logging
from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from config import DB_NAME, DB_TIMEOUT, SELLER_ROLE, MAX_COMPANY_NAME_LENGTH, ROLE_MAPPING, ADMIN_ROLE, DISPLAY_ROLE_MAPPING
from utils import check_role, make_keyboard, check_subscription, get_profile_menu, get_main_menu, get_admin_menu, format_uz_datetime, notify_admin, normalize_text
from regions import get_all_regions, get_districts_for_region
from datetime import datetime
import pytz

logger = logging.getLogger(__name__)

class EditProfile(StatesGroup):
    region = State()
    district = State()
    company_name = State()

class ProfileStates(StatesGroup):
    main = State()

async def require_subscription(message: types.Message, role: str, state: FSMContext) -> bool:
    user_id = message.from_user.id
    if role != ADMIN_ROLE:
        channel_active, bot_active, is_subscribed = await check_subscription(message.bot, user_id)
        if not is_subscribed:
            await message.answer(
                "–°–∏–∑–¥–∞ —Ñ–∞–æ–ª –æ–±—É–Ω–∞ –º–∞–≤–∂—É–¥ —ç–º–∞—Å. '–û–±—É–Ω–∞' —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥:",
                reply_markup=make_keyboard(["–û–±—É–Ω–∞", "–û—Ä“õ–∞–≥–∞"], columns=2, one_time=True)
            )
            await state.set_state("Registration:subscription")
            logger.info(f"User {user_id} denied profile access due to inactive subscription")
            return False
    return True

async def profile_info(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    allowed, role = await check_role(message)
    if not allowed:
        logger.info(f"User {user_id} not allowed to access profile")
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å–≥–∞ –∫–∏—Ä–∏—à —É—á—É–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏–Ω–≥:",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
        )
        await state.set_state("Registration:start")
        return
    if not await require_subscription(message, role, state):
        return
    display_role = DISPLAY_ROLE_MAPPING.get(role, role)
    try:
        async with aiosqlite.connect(DB_NAME, timeout=DB_TIMEOUT) as conn:
            async with conn.execute(
                "SELECT phone_number, role, region, district, company_name, unique_id FROM users WHERE id = ?",
                (user_id,)
            ) as cursor:
                user = await cursor.fetchone()
        if not user:
            await message.answer(
                "–°–∏–∑–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑ —Ç–æ–ø–∏–ª–º–∞–¥–∏. –ò–ª—Ç–∏–º–æ—Å, —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏–Ω–≥.",
                reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
            )
            await state.set_state("Registration:start")
            logger.warning(f"Profile not found for user {user_id}")
            return
        info = (
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user[0]}\n"
            f"üé≠ –†–æ–ª: {display_role}\n"
            f"üåç –í–∏–ª–æ—è—Ç: {user[2] or '–ô—û“õ'}\n"
            f"üèû –¢—É–º–∞–Ω: {user[3] or '–ô—û“õ'}\n"
        )
        if role == SELLER_ROLE:
            info += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {user[4] or '–ô—û“õ'}\n"
        info += f"üÜî ID: {user[5]}"
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            f"–°–∏–∑–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑:\n\n{info}",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)
        logger.info(f"User {user_id} viewed profile info")
    except aiosqlite.Error as e:
        logger.error(f"Error loading profile for user {user_id}: {e}", exc_info=True)
        await notify_admin(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id {user_id}: {str(e)}", bot=message.bot)
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —é–∫–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@MSMA_UZ).",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)

async def edit_profile_start(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    logger.debug(f"Starting edit_profile_start for user_id={user_id}")
    allowed, role = await check_role(message)
    if not allowed:
        logger.info(f"User {user_id} not allowed to edit profile")
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —Ç–∞“≥—Ä–∏—Ä–ª–∞—à —É—á—É–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à –∫–µ—Ä–∞–∫.",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
        )
        await state.set_state("Registration:start")
        return
    if not await require_subscription(message, role, state):
        logger.debug(f"User {user_id} blocked by subscription check")
        return
    try:
        regions = get_all_regions()
        logger.debug(f"Regions loaded for user_id={user_id}: {regions}")
        if not regions:
            reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
            await message.answer(
                "–í–∏–ª–æ—è—Ç–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏ –±—û—à. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@MSMA_UZ).",
                reply_markup=reply_markup
            )
            await state.set_state(ProfileStates.main)
            logger.warning(f"Empty regions list for user {user_id}")
            return
        await message.answer(
            "–Ø–Ω–≥–∏ –≤–∏–ª–æ—è—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=make_keyboard(regions, columns=2, with_back=True)
        )
        await state.set_state(EditProfile.region)
        await state.update_data(role=role)
        logger.info(f"User {user_id} started editing profile, moved to EditProfile.region")
    except Exception as e:
        logger.error(f"Error in edit_profile_start for user {user_id}: {e}", exc_info=True)
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ edit_profile_start –¥–ª—è user_id {user_id}: {str(e)}", bot=message.bot)
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            "–•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@MSMA_UZ).",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)

async def process_region(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    normalized_text = normalize_text(message.text)
    data = await state.get_data()
    role = data.get("role")
    regions = get_all_regions()
    if normalized_text == "–û—Ä“õ–∞–≥–∞":
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—é—Å–∏:",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)
        logger.info(f"User {user_id} returned to profile menu from region selection")
        return
    if normalized_text not in regions:
        await message.answer(
            "–ò–ª—Ç–∏–º–æ—Å, —Ä—û–π—Ö–∞—Ç–¥–∞–Ω –≤–∏–ª–æ—è—Ç —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=make_keyboard(regions, columns=2, with_back=True)
        )
        logger.warning(f"User {user_id} selected invalid region: {message.text}")
        return
    try:
        districts = get_districts_for_region(normalized_text)
        if not districts:
            reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
            await message.answer(
                "–¢—É–º–∞–Ω–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏ –±—û—à. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@MSMA_UZ).",
                reply_markup=reply_markup
            )
            await state.set_state(ProfileStates.main)
            logger.warning(f"Empty districts list for region {normalized_text} for user {user_id}")
            return
        await state.update_data(region=normalized_text)
        await message.answer(
            "–Ø–Ω–≥–∏ —Ç—É–º–∞–Ω–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=make_keyboard(districts, columns=2, with_back=True)
        )
        await state.set_state(EditProfile.district)
        logger.info(f"User {user_id} selected region {normalized_text}, moved to EditProfile.district")
    except Exception as e:
        logger.error(f"Error processing region for user {user_id}: {e}", exc_info=True)
        await notify_admin(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è user_id {user_id}: {str(e)}", bot=message.bot)
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            "–•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@MSMA_UZ).",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)

async def process_district(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    normalized_text = normalize_text(message.text)
    data = await state.get_data()
    role = data.get("role")
    region = data.get("region")
    districts = get_districts_for_region(region)
    if normalized_text == "–û—Ä“õ–∞–≥–∞":
        regions = get_all_regions()
        await message.answer(
            "–Ø–Ω–≥–∏ –≤–∏–ª–æ—è—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=make_keyboard(regions, columns=2, with_back=True)
        )
        await state.set_state(EditProfile.region)
        logger.info(f"User {user_id} returned to region selection from district")
        return
    if normalized_text not in districts:
        await message.answer(
            "–ò–ª—Ç–∏–º–æ—Å, —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —Ç—É–º–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=make_keyboard(districts, columns=2, with_back=True)
        )
        logger.warning(f"User {user_id} selected invalid district: {message.text}")
        return
    await state.update_data(district=normalized_text)
    if role == SELLER_ROLE:
        await message.answer(
            f"–ö–æ–º–ø–∞–Ω–∏—è –Ω–æ–º–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–º–∞–∫—Å. {MAX_COMPANY_NAME_LENGTH} –±–µ–ª–≥–∏):",
            reply_markup=make_keyboard(["–û—Ä“õ–∞–≥–∞"], one_time=True)
        )
        await state.set_state(EditProfile.company_name)
        logger.info(f"User {user_id} selected district {normalized_text}, moved to EditProfile.company_name")
    else:
        await save_edited_profile(message, state)

async def process_company_name(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    normalized_text = normalize_text(message.text)
    data = await state.get_data()
    role = data.get("role")
    if normalized_text == "–û—Ä“õ–∞–≥–∞":
        districts = get_districts_for_region(data.get("region"))
        await message.answer(
            "–Ø–Ω–≥–∏ —Ç—É–º–∞–Ω–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=make_keyboard(districts, columns=2, with_back=True)
        )
        await state.set_state(EditProfile.district)
        logger.info(f"User {user_id} returned to district selection from company_name")
        return
    company_name = normalized_text.strip()
    if len(company_name) > MAX_COMPANY_NAME_LENGTH:
        await message.answer(
            f"–ö–æ–º–ø–∞–Ω–∏—è –Ω–æ–º–∏ {MAX_COMPANY_NAME_LENGTH} –±–µ–ª–≥–∏–¥–∞–Ω –æ—à–º–∞—Å–ª–∏–≥–∏ –∫–µ—Ä–∞–∫. –ò–ª—Ç–∏–º–æ—Å, “õ–∞–π—Ç–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥:",
            reply_markup=make_keyboard(["–û—Ä“õ–∞–≥–∞"], one_time=True)
        )
        logger.warning(f"User {user_id} entered too long company name: {len(company_name)} characters")
        return
    await state.update_data(company_name=company_name)
    await save_edited_profile(message, state)

async def save_edited_profile(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    data = await state.get_data()
    role = data.get("role")
    try:
        company_name = data.get("company_name") if role == SELLER_ROLE else None
        async with aiosqlite.connect(DB_NAME, timeout=DB_TIMEOUT) as conn:
            if role == SELLER_ROLE:
                await conn.execute(
                    "UPDATE users SET region = ?, district = ?, company_name = ? WHERE id = ?",
                    (data["region"], data["district"], company_name, user_id)
                )
            else:
                await conn.execute(
                    "UPDATE users SET region = ?, district = ? WHERE id = ?",
                    (data["region"], data["district"], user_id)
                )
            await conn.commit()
        await message.answer(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —è–Ω–≥–∏–ª–∞–Ω–¥–∏! –ê—Å–æ—Å–∏–π –º–µ–Ω—é–≥–∞ “õ–∞–π—Ç–¥–∏–∫.",
            reply_markup=get_main_menu(role)
        )
        await state.clear()
        logger.info(f"User {user_id} saved edited profile: region={data['region']}, district={data['district']}")
    except aiosqlite.Error as e:
        logger.error(f"Error updating profile for user {user_id}: {e}", exc_info=True)
        await notify_admin(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id {user_id}: {str(e)}", bot=message.bot)
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —è–Ω–≥–∏–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@MSMA_UZ).",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)

async def profile_delete(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    allowed, role = await check_role(message)
    if not allowed:
        logger.info(f"User {user_id} not allowed to delete profile")
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —û—á–∏—Ä–∏—à —É—á—É–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à –∫–µ—Ä–∞–∫.",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
        )
        await state.set_state("Registration:start")
        return
    try:
        async with aiosqlite.connect(DB_NAME, timeout=DB_TIMEOUT) as conn:
            async with conn.execute(
                "SELECT phone_number, role, region, district, company_name, unique_id FROM users WHERE id = ?",
                (user_id,)
            ) as cursor:
                user = await cursor.fetchone()
            if not user:
                await message.answer(
                    "–°–∏–∑–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑ —Ç–æ–ø–∏–ª–º–∞–¥–∏.",
                    reply_markup=get_main_menu(None)
                )
                await state.clear()
                logger.warning(f"Profile not found for deletion for user {user_id}")
                return
            now_utc = format_uz_datetime(datetime.now(pytz.UTC))
            await conn.execute(
                """
                INSERT INTO deleted_users (user_id, phone_number, role, region, district, company_name, unique_id, deleted_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """,
                (user_id, user[0], user[1], user[2], user[3], user[4], user[5], now_utc)
            )
            await conn.execute("DELETE FROM users WHERE id = ?", (user_id,))
            await conn.commit()
        await state.clear()
        try:
            storage = state.storage
            if hasattr(storage, 'redis'):
                redis_keys = await storage.redis.keys(f"aiogram:*:{user_id}:*")
                if redis_keys:
                    await storage.redis.delete(*redis_keys)
                    logger.info(f"Cleared {len(redis_keys)} Redis keys for user {user_id}")
        except Exception as e:
            logger.warning(f"Failed to clear Redis state for user {user_id}: {e}", exc_info=True)
        await message.answer(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —û—á–∏—Ä–∏–ª–¥–∏. “ö–∞–π—Ç–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à —É—á—É–Ω —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥:",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à", "–û—Ä“õ–∞–≥–∞"], columns=2, one_time=True)
        )
        logger.info(f"User {user_id} deleted their profile")
    except aiosqlite.Error as e:
        logger.error(f"Error deleting profile for user {user_id}: {e}", exc_info=True)
        await notify_admin(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id {user_id}: {str(e)}", bot=message.bot)
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —û—á–∏—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@MSMA_UZ).",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)

async def profile_menu(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    normalized_text = normalize_text(message.text)
    if normalized_text != "–ú–µ–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–∏–º":
        logger.warning(f"Unexpected text in profile_menu: user_id={user_id}, text='{normalized_text}'")
        return
    allowed, role = await check_role(message)
    if not allowed:
        logger.info(f"User {user_id} not allowed to access profile")
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å–≥–∞ –∫–∏—Ä–∏—à —É—á—É–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏–Ω–≥:",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
        )
        await state.set_state("Registration:start")
        return
    if not await require_subscription(message, role, state):
        return
    reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
    await message.answer(
        "üìã –ú–µ–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–∏–º:",
        reply_markup=reply_markup
    )
    await state.set_state(ProfileStates.main)
    logger.info(f"User {user_id} (role={role}) entered profile menu")

async def process_profile_action(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    normalized_text = normalize_text(message.text)
    current_state = await state.get_state()
    logger.debug(f"Processing ProfileStates.main: user_id={user_id}, text={normalized_text}, state={current_state}")
    allowed, role = await check_role(message)
    if not allowed:
        logger.info(f"User {user_id} not allowed")
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—é—Å–∏–≥–∞ –∫–∏—Ä–∏—à —É—á—É–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à –∫–µ—Ä–∞–∫.",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
        )
        await state.set_state("Registration:start")
        return
    if current_state != ProfileStates.main.state:
        logger.warning(f"User {user_id} not in ProfileStates.main, current state: {current_state}")
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—é—Å–∏–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥:",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)
        return
    reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
    if normalized_text == "–û—Ä“õ–∞–≥–∞":
        await message.answer(
            "üè† –ê—Å–æ—Å–∏–π –º–µ–Ω—é:",
            reply_markup=get_main_menu(role)
        )
        await state.clear()
        logger.info(f"User {user_id} returned to main menu from profile")
    elif normalized_text == "–ü—Ä–æ—Ñ–∏–ª—å “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç":
        await profile_info(message, state)
    elif normalized_text == "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —Ç–∞“≥—Ä–∏—Ä–ª–∞—à":
        logger.debug(f"User {user_id} selected '–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —Ç–∞“≥—Ä–∏—Ä–ª–∞—à'")
        await edit_profile_start(message, state)
    elif normalized_text == "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —û—á–∏—Ä–∏—à":
        await profile_delete(message, state)
    else:
        await message.answer(
            "–ò–ª—Ç–∏–º–æ—Å, –º–µ–Ω—é–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=reply_markup
        )
        logger.warning(f"User {user_id} sent invalid profile action: {normalized_text}")

async def handle_back_button(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    normalized_text = normalize_text(message.text)
    current_state = await state.get_state()
    logger.debug(f"handle_back_button: user_id={user_id}, text='{normalized_text}', state={current_state}")
    if normalized_text != "–æ—Ä“õ–∞–≥–∞" or current_state != ProfileStates.main.state:
        logger.debug(f"handle_back_button skipped: user_id={user_id}, text='{normalized_text}', state={current_state}")
        return
    allowed, role = await check_role(message)
    if not allowed:
        logger.info(f"User {user_id} not allowed")
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—é—Å–∏–≥–∞ –∫–∏—Ä–∏—à —É—á—É–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à –∫–µ—Ä–∞–∫.",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
        )
        await state.set_state("Registration:start")
        return
    reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
    await message.answer(
        "üìã –ú–µ–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–∏–º:",
        reply_markup=reply_markup
    )
    await state.set_state(ProfileStates.main)
    logger.info(f"User {user_id} returned to profile menu via back button")

def register_handlers(dp: Dispatcher):
    logger.info("Registering profile handlers")
    dp.message.register(profile_menu, F.text == "–ú–µ–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–∏–º")
    dp.message.register(process_profile_action, ProfileStates.main)
    dp.message.register(process_region, EditProfile.region)
    dp.message.register(process_district, EditProfile.district)
    dp.message.register(process_company_name, EditProfile.company_name)
    dp.message.register(handle_back_button, ProfileStates.main, F.text == "–û—Ä“õ–∞–≥–∞")
    logger.info("Profile handlers registered")