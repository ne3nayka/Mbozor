import aiosqlite
import logging
from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import DB_NAME, DB_TIMEOUT, SELLER_ROLE, MAX_COMPANY_NAME_LENGTH, ADMIN_ROLE, DISPLAY_ROLE_MAPPING, BUYER_ROLE
from utils import check_role, make_keyboard, check_subscription, get_profile_menu, get_main_menu, get_admin_menu, format_uz_datetime, notify_admin, has_pending_items
from regions import get_all_regions, get_districts_for_region
from datetime import datetime
import pytz

logger = logging.getLogger(__name__)

class EditProfile(StatesGroup):
    region = State()
    district = State()
    company_name = State()

class ProfileStates(StatesGroup):
    main = State()

async def require_subscription(message: types.Message, role: str, state: FSMContext) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ—Ç–∞."""
    user_id = message.from_user.id
    logger.debug(f"require_subscription: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}, —Ä–æ–ª—å={role}")
    if role == ADMIN_ROLE:
        logger.debug(f"–ê–¥–º–∏–Ω {user_id} –ø—Ä–æ–ø—É—â–µ–Ω –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
        return True
    try:
        if not hasattr(state.storage, 'redis'):
            logger.error(f"Storage –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Redis –¥–ª—è user_id={user_id}")
            raise ValueError("Storage –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Redis")
        success, bot_active, is_subscribed = await check_subscription(message.bot, user_id, state.storage)
        logger.debug(f"check_subscription –¥–ª—è user_id={user_id}: success={success}, bot_active={bot_active}, is_subscribed={is_subscribed}")

        async with aiosqlite.connect(DB_NAME, timeout=DB_TIMEOUT) as conn:
            async with conn.execute(
                    "SELECT bot_expires FROM payments WHERE user_id = ?",
                    (user_id,)
            ) as cursor:
                result = await cursor.fetchone()
        bot_expires = result[0] if result else None
        logger.debug(f"bot_expires –∏–∑ –±–∞–∑—ã –¥–ª—è user_id={user_id}: {bot_expires}")

        if not is_subscribed:
            await message.answer(
                "–°–∏–∑–¥–∞ —Ñ–∞–æ–ª –æ–±—É–Ω–∞ –º–∞–≤–∂—É–¥ —ç–º–∞—Å. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@ad_mbozor).",
                reply_markup=get_main_menu(BUYER_ROLE)
            )
            await state.set_state("Registration:subscription")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
            try:
                redis_keys = await state.storage.redis.keys(f"aiogram:*:{user_id}:*")
                if redis_keys:
                    await state.storage.redis.delete(*redis_keys)
                    logger.info(f"–û—á–∏—â–µ–Ω–æ {len(redis_keys)} –∫–ª—é—á–µ–π Redis –¥–ª—è user_id={user_id}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis –¥–ª—è user_id={user_id}: {e}")
            return False
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await notify_admin(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {str(e)}", bot=message.bot)
        await message.answer(
            "–•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@ad_mbozor).",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
        )
        return False

async def profile_menu(message: types.Message, state: FSMContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è."""
    user_id = message.from_user.id
    raw_text = message.text
    logger.debug(f"profile_menu: user_id={user_id}, text='{raw_text}'")
    if raw_text != "–ú–µ–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–∏–º":
        logger.warning(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ profile_menu: user_id={user_id}, text='{raw_text}'")
        await message.answer(
            "–ò–ª—Ç–∏–º–æ—Å, –º–µ–Ω—é–¥–∞–Ω –∞–º–∞–ª —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=get_main_menu(None)
        )
        return
    try:
        allowed, role = await check_role(message)
        logger.debug(f"profile_menu: user_id={user_id}, allowed={allowed}, role={role}")
        if not allowed:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            async with aiosqlite.connect(DB_NAME, timeout=DB_TIMEOUT) as conn:
                async with conn.execute(
                    "SELECT role, region, phone_number FROM users WHERE id = ?", (user_id,)
                ) as cursor:
                    user = await cursor.fetchone()
                if user and not all(user):  # –ß–∞—Å—Ç–∏—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                    logger.warning(f"–ß–∞—Å—Ç–∏—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–ª—è user_id={user_id}: role={user[0]}, region={user[1]}, phone_number={user[2]}")
                    await conn.execute(
                        "DELETE FROM users WHERE id = ? AND (role IS NULL OR region IS NULL OR phone_number IS NULL)", (user_id,)
                    )
                    await conn.commit()
                    logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è user_id={user_id}")
            await message.answer(
                "–ü—Ä–æ—Ñ–∏–ª—å–≥–∞ –∫–∏—Ä–∏—à —É—á—É–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏–Ω–≥:",
                reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
            )
            await state.set_state("Registration:start")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            return
        if not await require_subscription(message, role, state):
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
            return
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            "üìã –ú–µ–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–∏–º:",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (—Ä–æ–ª—å={role}) –≤–æ—à—ë–ª –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ profile_menu –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ profile_menu –¥–ª—è user_id {user_id}: {str(e)}", bot=message.bot)
        await message.answer(
            "–•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@ad_mbozor).",
            reply_markup=get_main_menu(None)
        )

async def profile_info(message: types.Message, state: FSMContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    raw_text = message.text
    logger.debug(f"profile_info: user_id={user_id}, text='{raw_text}'")
    if raw_text != "–ü—Ä–æ—Ñ–∏–ª—å “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç":
        logger.warning(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ profile_info: user_id={user_id}, text='{raw_text}'")
        await message.answer(
            "–ò–ª—Ç–∏–º–æ—Å, –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—é—Å–∏–¥–∞–Ω –∞–º–∞–ª —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=get_profile_menu()
        )
        return
    allowed, role = await check_role(message)
    if not allowed:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é")
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å–≥–∞ –∫–∏—Ä–∏—à —É—á—É–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏–Ω–≥:",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
        )
        await state.set_state("Registration:start")
        return
    if not await require_subscription(message, role, state):
        return
    display_role = DISPLAY_ROLE_MAPPING.get(role, role)
    try:
        async with aiosqlite.connect(DB_NAME, timeout=DB_TIMEOUT) as conn:
            async with conn.execute(
                "SELECT phone_number, role, region, district, company_name, unique_id FROM users WHERE id = ?",
                (user_id,)
            ) as cursor:
                user = await cursor.fetchone()
        if not user:
            await message.answer(
                "–°–∏–∑–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑ —Ç–æ–ø–∏–ª–º–∞–¥–∏. –ò–ª—Ç–∏–º–æ—Å, —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏–Ω–≥.",
                reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
            )
            await state.set_state("Registration:start")
            logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id {user_id}")
            return
        info = (
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user[0]}\n"
            f"üé≠ –†–æ–ª: {display_role}\n"
            f"üåç –í–∏–ª–æ—è—Ç: {user[2] or '–ô—û“õ'}\n"
            f"üèû –¢—É–º–∞–Ω: {user[3] or '–ô—û“õ'}\n"
        )
        if role == SELLER_ROLE:
            info += f"üè¢ –¢–∞—à–∫–∏–ª–æ—Ç: {user[4] or '–ô—û“õ'}\n"
        info += f"üÜî ID: {user[5]}"
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            f"–°–∏–∑–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑:\n\n{info}",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        await notify_admin(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id {user_id}: {str(e)}", bot=message.bot)
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —é–∫–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@ad_mbozor).",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)

async def edit_profile_start(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
    user_id = message.from_user.id
    raw_text = message.text
    logger.debug(f"edit_profile_start: user_id={user_id}, text='{raw_text}'")
    if raw_text != "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —Ç–∞“≥—Ä–∏—Ä–ª–∞—à":
        logger.warning(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ edit_profile_start: user_id={user_id}, text='{raw_text}'")
        await message.answer(
            "–ò–ª—Ç–∏–º–æ—Å, –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—é—Å–∏–¥–∞–Ω –∞–º–∞–ª —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=get_profile_menu()
        )
        return
    allowed, role = await check_role(message)
    if not allowed:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è")
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —Ç–∞“≥—Ä–∏—Ä–ª–∞—à —É—á—É–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à –∫–µ—Ä–∞–∫.",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
        )
        await state.set_state("Registration:start")
        return
    if not await require_subscription(message, role, state):
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
        return
    try:
        regions = get_all_regions()
        if not regions:
            reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
            await message.answer(
                "–í–∏–ª–æ—è—Ç–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏ –±—û—à. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@ad_mbozor).",
                reply_markup=reply_markup
            )
            await state.set_state(ProfileStates.main)
            logger.warning(f"–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è user_id {user_id}")
            return
        await message.answer(
            "–Ø–Ω–≥–∏ –≤–∏–ª–æ—è—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=make_keyboard(regions, columns=2, with_back=True)
        )
        await state.set_state(EditProfile.region)
        await state.update_data(role=role)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, —Ä–æ–ª—å={role}, –ø–µ—Ä–µ—à—ë–ª –≤ EditProfile.region")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_profile_start –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ edit_profile_start –¥–ª—è user_id {user_id}: {str(e)}", bot=message.bot)
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            "–•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@ad_mbozor).",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)

async def process_region(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞."""
    user_id = message.from_user.id
    region = message.text
    data = await state.get_data()
    role = data.get("role")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: "roleempl" -> "role"
    regions = get_all_regions()
    current_state = await state.get_state()
    logger.debug(f"process_region: user_id={user_id}, region='{region}', state={current_state}")
    if current_state != EditProfile.region.state:
        logger.warning(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è process_region: user_id={user_id}, state={current_state}")
        await state.set_state(ProfileStates.main)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –¥–ª—è role, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—é—Å–∏:", reply_markup=reply_markup)
        return
    try:
        if region == "–û—Ä“õ–∞–≥–∞":
            reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—é—Å–∏:", reply_markup=reply_markup)
            await state.set_state(ProfileStates.main)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞")
            return
        if region not in regions:
            await message.answer(
                "–ò–ª—Ç–∏–º–æ—Å, —Ä—û–π—Ö–∞—Ç–¥–∞–Ω –≤–∏–ª–æ—è—Ç —Ç–∞–Ω–ª–∞–Ω–≥:",
                reply_markup=make_keyboard(regions, columns=2, with_back=True)
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω: {region}")
            return
        await state.update_data(region=region)
        if role == SELLER_ROLE:
            districts = get_districts_for_region(region)
            if not districts:
                async with aiosqlite.connect(DB_NAME, timeout=DB_TIMEOUT) as conn:
                    await conn.execute(
                        "UPDATE users SET region = ?, district = ? WHERE id = ?",
                        (region, "–ô—û“õ", user_id)
                    )
                    await conn.commit()
                await message.answer(
                    f"–Ø–Ω–≥–∏ —Ç–∞—à–∫–∏–ª–æ—Ç –Ω–æ–º–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–º–∞–∫—Å. {MAX_COMPANY_NAME_LENGTH} –±–µ–ª–≥–∏):",
                    reply_markup=make_keyboard(["–û—Ä“õ–∞–≥–∞"], one_time=True)
                )
                await state.set_state(EditProfile.company_name)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ä–µ–≥–∏–æ–Ω {region} –±–µ–∑ —Ä–∞–π–æ–Ω–∞, –ø–µ—Ä–µ—à—ë–ª –≤ EditProfile.company_name")
            else:
                await message.answer(
                    "–Ø–Ω–≥–∏ —Ç—É–º–∞–Ω–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
                    reply_markup=make_keyboard(districts, columns=2, with_back=True)
                )
                await state.set_state(EditProfile.district)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ä–µ–≥–∏–æ–Ω {region}, –ø–µ—Ä–µ—à—ë–ª –≤ EditProfile.district")
        else:
            async with aiosqlite.connect(DB_NAME, timeout=DB_TIMEOUT) as conn:
                await conn.execute(
                    "UPDATE users SET region = ?, district = ? WHERE id = ?",
                    (region, "–ô—û“õ", user_id)
                )
                await conn.commit()
            await message.answer(
                "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —è–Ω–≥–∏–ª–∞–Ω–¥–∏! –ê—Å–æ—Å–∏–π –º–µ–Ω—é–≥–∞ “õ–∞–π—Ç–¥–∏–∫.",
                reply_markup=get_main_menu(role)
            )
            await state.clear()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–∏–ª —Ä–µ–≥–∏–æ–Ω {region} –¥–ª—è —Ä–æ–ª–∏ –•–∞—Ä–∏–¥–æ—Ä")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        await notify_admin(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è user_id {user_id}: {str(e)}", bot=message.bot)
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            "–•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@ad_mbozor).",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)

async def process_district(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤."""
    user_id = message.from_user.id
    district = message.text
    data = await state.get_data()
    role = data.get("role")
    region = data.get("region")
    districts = get_districts_for_region(region)
    current_state = await state.get_state()
    logger.debug(f"process_district: user_id={user_id}, district='{district}', state={current_state}")
    if current_state != EditProfile.district.state:
        logger.warning(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è process_district: user_id={user_id}, state={current_state}")
        await state.set_state(ProfileStates.main)
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—é—Å–∏:", reply_markup=reply_markup)
        return
    try:
        if district == "–û—Ä“õ–∞–≥–∞":
            regions = get_all_regions()
            await message.answer(
                "–Ø–Ω–≥–∏ –≤–∏–ª–æ—è—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
                reply_markup=make_keyboard(regions, columns=2, with_back=True)
            )
            await state.set_state(EditProfile.region)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ —Ä–∞–π–æ–Ω–∞")
            return
        if district not in districts:
            await message.answer(
                "–ò–ª—Ç–∏–º–æ—Å, —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —Ç—É–º–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥:",
                reply_markup=make_keyboard(districts, columns=2, with_back=True)
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–π–æ–Ω: {district}")
            return
        await state.update_data(district=district)
        await message.answer(
            f"–Ø–Ω–≥–∏ —Ç–∞—à–∫–∏–ª–æ—Ç –Ω–æ–º–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–º–∞–∫—Å. {MAX_COMPANY_NAME_LENGTH} –±–µ–ª–≥–∏):",
            reply_markup=make_keyboard(["–û—Ä“õ–∞–≥–∞"], one_time=True)
        )
        await state.set_state(EditProfile.company_name)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ä–∞–π–æ–Ω {district}, –ø–µ—Ä–µ—à—ë–ª –∫ EditProfile.company_name")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–π–æ–Ω–∞ –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        await notify_admin(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–π–æ–Ω–∞ –¥–ª—è user_id {user_id}: {str(e)}", bot=message.bot)
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            "–•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@ad_mbozor).",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)

async def process_company_name(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤."""
    user_id = message.from_user.id
    company_name = message.text
    data = await state.get_data()
    role = data.get("role")
    current_state = await state.get_state()
    logger.debug(f"process_company_name: user_id={user_id}, company_name='{company_name}', state={current_state}")
    if current_state != EditProfile.company_name.state:
        logger.warning(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è process_company_name: user_id={user_id}, state={current_state}")
        await state.set_state(ProfileStates.main)
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—é—Å–∏:", reply_markup=reply_markup)
        return
    try:
        if company_name == "–û—Ä“õ–∞–≥–∞":
            districts = get_districts_for_region(data.get("region"))
            if not districts:
                regions = get_all_regions()
                await message.answer(
                    "–Ø–Ω–≥–∏ –≤–∏–ª–æ—è—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
                    reply_markup=make_keyboard(regions, columns=2, with_back=True)
                )
                await state.set_state(EditProfile.region)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ –≤–≤–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (–ø—É—Å—Ç—ã–µ —Ç—É–º–∞–Ω—ã)")
            else:
                await message.answer(
                    "–Ø–Ω–≥–∏ —Ç—É–º–∞–Ω–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
                    reply_markup=make_keyboard(districts, columns=2, with_back=True)
                )
                await state.set_state(EditProfile.district)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–∞–π–æ–Ω–∞ –∏–∑ –≤–≤–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏")
            return
        if len(company_name) > MAX_COMPANY_NAME_LENGTH:
            await message.answer(
                f"–¢–∞—à–∫–∏–ª–æ—Ç –Ω–æ–º–∏ {MAX_COMPANY_NAME_LENGTH} –±–µ–ª–≥–∏–¥–∞–Ω –æ—à–º–∞—Å–ª–∏–≥–∏ –∫–µ—Ä–∞–∫. –ò–ª—Ç–∏–º–æ—Å, “õ–∞–π—Ç–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥:",
                reply_markup=make_keyboard(["–û—Ä“õ–∞–≥–∞"], one_time=True)
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {len(company_name)} —Å–∏–º–≤–æ–ª–æ–≤")
            return
        async with aiosqlite.connect(DB_NAME, timeout=DB_TIMEOUT) as conn:
            await conn.execute(
                "UPDATE users SET region = ?, district = ?, company_name = ? WHERE id = ?",
                (data["region"], data.get("district", "–ô—û“õ"), company_name, user_id)
            )
            await conn.commit()
        await message.answer(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —è–Ω–≥–∏–ª–∞–Ω–¥–∏! –ê—Å–æ—Å–∏–π –º–µ–Ω—é–≥–∞ “õ–∞–π—Ç–¥–∏–∫.",
            reply_markup=get_main_menu(role)
        )
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–∏–ª –ø—Ä–æ—Ñ–∏–ª—å: region={data['region']}, district={data.get('district', '–ô—û“õ')}, company_name={company_name}")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        await notify_admin(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id {user_id}: {str(e)}", bot=message.bot)
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —è–Ω–≥–∏–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@ad_mbozor).",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ process_company_name –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await notify_admin(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ process_company_name –¥–ª—è user_id={user_id}: {str(e)}", bot=message.bot)
        await message.answer(
            "–•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@ad_mbozor).",
            reply_markup=make_keyboard(["–û—Ä“õ–∞–≥–∞"], one_time=True)
        )
        await state.set_state(EditProfile.company_name)

async def profile_delete(message: types.Message, state: FSMContext) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    user_id = message.from_user.id
    raw_text = message.text
    logger.debug(f"profile_delete: user_id={user_id}, text='{raw_text}'")
    if raw_text != "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —û—á–∏—Ä–∏—à":
        logger.warning(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ profile_delete: user_id={user_id}, text='{raw_text}'")
        await message.answer(
            "–ò–ª—Ç–∏–º–æ—Å, –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—é—Å–∏–¥–∞–Ω –∞–º–∞–ª —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=get_profile_menu()
        )
        return
    allowed, role = await check_role(message)
    if not allowed:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è")
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —û—á–∏—Ä–∏—à —É—á—É–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à –∫–µ—Ä–∞–∫.",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
        )
        await state.set_state("Registration:start")
        return
    try:
        if await has_pending_items(user_id):
            await message.answer(
                "–°–∏–∑–¥–∞ —Ñ–∞–æ–ª —ç—ä–ª–æ–Ω–ª–∞—Ä —ë–∫–∏ —Å—û—Ä–æ–≤–ª–∞—Ä –º–∞–≤–∂—É–¥. –ê–≤–≤–∞–ª —É–ª–∞—Ä–Ω–∏ —è–∫—É–Ω–ª–∞–Ω–≥.",
                reply_markup=get_profile_menu()
            )
            await state.set_state(ProfileStates.main)
            logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            return
        async with aiosqlite.connect(DB_NAME, timeout=DB_TIMEOUT) as conn:
            async with conn.execute(
                "SELECT phone_number, role, region, district, company_name, unique_id FROM users WHERE id = ?",
                (user_id,)
            ) as cursor:
                user = await cursor.fetchone()
            if not user:
                await message.answer(
                    "–°–∏–∑–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑ —Ç–æ–ø–∏–ª–º–∞–¥–∏.",
                    reply_markup=get_main_menu(None)
                )
                await state.clear()
                logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è user_id {user_id}")
                return
            now_utc = format_uz_datetime(datetime.now(pytz.UTC))
            await conn.execute(
                """
                INSERT INTO deleted_users (user_id, phone_number, role, region, district, company_name, unique_id, deleted_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """,
                (user_id, user[0], user[1], user[2], user[3], user[4], user[5], now_utc)
            )
            await conn.execute("DELETE FROM users WHERE id = ?", (user_id,))
            await conn.commit()
        await state.clear()
        try:
            storage = state.storage
            if hasattr(storage, 'redis'):
                redis_keys = await storage.redis.keys(f"aiogram:*:{user_id}:*")
                if redis_keys:
                    await storage.redis.delete(*redis_keys)
                    logger.info(f"–û—á–∏—â–µ–Ω–æ {len(redis_keys)} –∫–ª—é—á–µ–π Redis –¥–ª—è user_id {user_id}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ Redis –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        await message.answer(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —û—á–∏—Ä–∏–ª–¥–∏. “ö–∞–π—Ç–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à —É—á—É–Ω —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥:",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à", "–û—Ä“õ–∞–≥–∞"], columns=2, one_time=True)
        )
        await state.set_state("Registration:start")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ Registration:start")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        await notify_admin(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id {user_id}: {str(e)}", bot=message.bot)
        reply_markup = get_admin_menu() if role == ADMIN_ROLE else get_profile_menu()
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —û—á–∏—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@ad_mbozor).",
            reply_markup=reply_markup
        )
        await state.set_state(ProfileStates.main)

async def handle_start_registration_after_delete(message: types.Message, state: FSMContext, dp: Dispatcher) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à' –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
    user_id = message.from_user.id
    raw_text = message.text
    logger.debug(f"handle_start_registration_after_delete: user_id={user_id}, text='{raw_text}'")
    if raw_text != "–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à":
        logger.warning(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ handle_start_registration_after_delete: user_id={user_id}, text='{raw_text}'")
        await message.answer(
            "–ò–ª—Ç–∏–º–æ—Å, '–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à' —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥:",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
        )
        return
    try:
        async with aiosqlite.connect(DB_NAME, timeout=DB_TIMEOUT) as conn:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            async with conn.execute(
                "SELECT blocked FROM deleted_users WHERE user_id = ? AND blocked = TRUE", (user_id,)
            ) as cursor:
                blocked = await cursor.fetchone()
            if blocked:
                await message.answer(
                    "–°–∏–∑–Ω–∏–Ω–≥ Telegram ID –±–ª–æ–∫–ª–∞–Ω–≥–∞–Ω. –ê–¥–º–∏–Ω–≥–∞ –º—É—Ä–æ–∂–∞–∞—Ç “õ–∏–ª–∏–Ω–≥ (@ad_mbozor).",
                    reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
                )
                await state.clear()
                logger.warning(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            async with conn.execute(
                "SELECT role, region, phone_number FROM users WHERE id = ?", (user_id,)
            ) as cursor:
                user = await cursor.fetchone()
                if user and all(user):
                    await message.answer(
                        "–°–∏–∑ –∞–ª–ª–∞“õ–∞—á–æ–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω—Å–∏–∑. –ê—Å–æ—Å–∏–π –º–µ–Ω—é–≥–∞ “õ–∞–π—Ç–∏–Ω–≥:",
                        reply_markup=get_main_menu(user[0])
                    )
                    await state.clear()
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                    return

            # –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await conn.execute(
                "DELETE FROM users WHERE id = ? AND (role IS NULL OR region IS NULL OR phone_number IS NULL)", (user_id,)
            )
            await conn.commit()

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ —É–ª–∞—à–∏—à", request_contact=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            "–ò–ª—Ç–∏–º–æ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —É–ª–∞—à–∏–Ω–≥:",
            reply_markup=keyboard
        )
        await state.set_state("Registration:phone")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ Registration:phone")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ handle_start_registration_after_delete –¥–ª—è user_id={user_id}: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ handle_start_registration_after_delete –¥–ª—è user_id={user_id}: {str(e)}", bot=message.bot)
        await message.answer(
            "–•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@ad_mbozor).",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
        )
        await state.set_state("Registration:start")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_start_registration_after_delete –¥–ª—è user_id={user_id}: {e}")
        await notify_admin(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_start_registration_after_delete –¥–ª—è user_id={user_id}: {str(e)}", bot=message.bot)
        await message.answer(
            "–•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@ad_mbozor).",
            reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
        )
        await state.set_state("Registration:start")

async def handle_back_button(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Ä“õ–∞–≥–∞' –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è."""
    user_id = message.from_user.id
    raw_text = message.text
    current_state = await state.get_state()
    logger.debug(f"handle_back_button: user_id={user_id}, text='{raw_text}', state={current_state}")
    if raw_text != "–û—Ä“õ–∞–≥–∞" or current_state != ProfileStates.main.state:
        logger.debug(f"handle_back_button –ø—Ä–æ–ø—É—â–µ–Ω: user_id={user_id}, text='{raw_text}', state={current_state}")
        return
    try:
        allowed, role = await check_role(message)
        if not allowed:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            await message.answer(
                "–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—é—Å–∏–≥–∞ –∫–∏—Ä–∏—à —É—á—É–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à –∫–µ—Ä–∞–∫.",
                reply_markup=make_keyboard(["–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"], one_time=True)
            )
            await state.set_state("Registration:start")
            return
        await message.answer(
            "–ê—Å–æ—Å–∏–π –º–µ–Ω—é:",
            reply_markup=get_main_menu(role)
        )
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_back_button –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        await notify_admin(f"–û—à–∏–±–∫–∞ –≤ handle_back_button –¥–ª—è user_id {user_id}: {str(e)}", bot=message.bot)
        await message.answer(
            "–•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥ (@ad_mbozor).",
            reply_markup=get_main_menu(None)
        )

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è."""
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è")
    dp.message.register(profile_menu, F.text == "–ú–µ–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–∏–º")
    dp.message.register(profile_info, F.text == "–ü—Ä–æ—Ñ–∏–ª—å “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç")
    dp.message.register(edit_profile_start, F.text == "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —Ç–∞“≥—Ä–∏—Ä–ª–∞—à")
    dp.message.register(profile_delete, F.text == "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∏ —û—á–∏—Ä–∏—à")
    dp.message.register(process_region, EditProfile.region)
    dp.message.register(process_district, EditProfile.district)
    dp.message.register(process_company_name, EditProfile.company_name)
    dp.message.register(handle_back_button, ProfileStates.main, F.text == "–û—Ä“õ–∞–≥–∞")
    dp.message.register(handle_start_registration_after_delete, F.text == "–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à")
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")